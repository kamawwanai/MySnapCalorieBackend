#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –º–æ–¥–µ–ª—å—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import os
import sys

def check_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏"""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏")
    print("=" * 50)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    models_dir = os.path.join("app", "models")
    model_path = os.path.join(models_dir, "class_model.pth")
    classes_path = os.path.join(models_dir, "classes.pth")
    
    print(f"–ü–∞–ø–∫–∞ models: {models_dir}")
    print(f"–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏: {model_path}")
    print(f"–ü—É—Ç—å –∫ –∫–ª–∞—Å—Å–∞–º: {classes_path}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É
    if os.path.exists(models_dir):
        print(f"–ü–∞–ø–∫–∞ {models_dir} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ {models_dir}:")
        try:
            files = os.listdir(models_dir)
            for file in files:
                file_path = os.path.join(models_dir, file)
                if os.path.isfile(file_path):
                    size = os.path.getsize(file_path)
                    print(f"{file} ({size:,} –±–∞–π—Ç)")
                else:
                    print(f"{file}/")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
    else:
        print(f"–ü–∞–ø–∫–∞ {models_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return False
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    model_exists = os.path.exists(model_path)
    classes_exists = os.path.exists(classes_path)
    
    print(f"{'‚úÖ' if model_exists else '‚ùå'} class_model.pth: {model_exists}")
    print(f"{'‚úÖ' if classes_exists else '‚ùå'} classes.pth: {classes_exists}")
    
    if model_exists:
        size = os.path.getsize(model_path)
        print(f"–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: {size:,} –±–∞–π—Ç ({size/1024/1024:.1f} MB)")
    
    if classes_exists:
        size = os.path.getsize(classes_path)
        print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∫–ª–∞—Å—Å–æ–≤: {size:,} –±–∞–π—Ç")
    
    return model_exists and classes_exists

def test_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\n –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞")
    print("=" * 50)
    
    try:
        from app.models.classifier import MODEL_PATH, CLASSES_PATH, get_classifier
        print("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è —É—Å–ø–µ—à–µ–Ω")
        print(f"MODEL_PATH: {MODEL_PATH}")
        print(f"CLASSES_PATH: {CLASSES_PATH}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏ –∏–∑ –º–æ–¥—É–ª—è
        model_exists = os.path.exists(MODEL_PATH)
        classes_exists = os.path.exists(CLASSES_PATH)
        
        print(f"{'‚úÖ' if model_exists else '‚ùå'} –ú–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ –∏–∑ –º–æ–¥—É–ª—è: {model_exists}")
        print(f"{'‚úÖ' if classes_exists else '‚ùå'} –ö–ª–∞—Å—Å—ã –Ω–∞–π–¥–µ–Ω—ã –ø–æ –ø—É—Ç–∏ –∏–∑ –º–æ–¥—É–ª—è: {classes_exists}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_classifier():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
    print("\n –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞")
    print("=" * 50)
    
    try:
        from app.models.classifier import get_classifier
        
        classifier = get_classifier()
        print(" –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
        ready = classifier.is_ready()
        print(f"{'‚úÖ' if ready else '‚ùå'} –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {ready}")
        
        if not ready:
            print("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏...")
            try:
                classifier._load_model()
                print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤: {len(classifier.classes) if classifier.classes else 0}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        
        return ready
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    cwd = os.getcwd()
    print(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {cwd}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    files_ok = check_files()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç
    import_ok = test_import()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    classifier_ok = test_classifier()
    
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–ò:")
    print(f"{'‚úÖ' if files_ok else '‚ùå'} –§–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã")
    print(f"{'‚úÖ' if import_ok else '‚ùå'} –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print(f"{'‚úÖ' if classifier_ok else '‚ùå'} –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤")
    
    if files_ok and import_ok and classifier_ok:
        print("\n –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("\n –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")

if __name__ == "__main__":
    main() 